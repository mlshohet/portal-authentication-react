{"version":3,"sources":["components/form-input/form-input.component.jsx","components/list-item/list-item.component.jsx","components/button-prime/button-prime.component.jsx","pages/list/list.component.jsx","components/login-form/login-form.component.jsx","pages/login/login.component.jsx","App.js","index.js"],"names":["FormInput","onChange","name","isValidatedEmail","isValidatedPassword","listInput","otherProps","className","size","type","ListItem","children","ButtonPrime","list","ToDoList","props","useState","listItem","setListItem","listItems","setListItems","route","setRoute","onClick","localStorage","clear","id","event","preventDefault","target","value","document","getElementById","map","item","newItems","filter","entry","handleDelete","LoginForm","email","setEmail","password","setPassword","setValidatedEmail","setValidatedPassword","blurEmail","setBlurEmail","blurPassword","setBlurPassword","useEffect","test","length","blurValidateEmail","blurValidatePassword","retrievedSession","window","getItem","session","JSON","parse","placeholder","onBlur","required","sessionToStore","setItem","stringify","disabled","Login","App","ReactDOM","render","StrictMode"],"mappings":"0WAqDeA,EAzCG,SAAC,GAOX,IANNC,EAMK,EANLA,SACAC,EAKK,EALLA,KACAC,EAIK,EAJLA,iBACAC,EAGK,EAHLA,oBACAC,EAEK,EAFLA,UACGC,EACE,wFAEN,OACC,sBACCC,UAAS,oBAEPF,IACEF,GAA6B,UAATD,KACnBE,GAAgC,aAATF,GAFd,kBAC6B,UAHlC,YADV,UAWEA,EACU,UAATA,EACC,cAAC,IAAD,CAECM,KAAK,SACN,cAAC,IAAD,CAECA,KAAK,SACN,GAEH,mCACCD,UAAU,aACVE,KAAK,OACLR,SAAUA,GACNK,Q,QCjCOI,G,MAXE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAaL,EAAiB,4BACjD,OACC,6CACCC,UAAU,aACLD,GAFN,aAIGK,OCSUC,G,MAfK,SAAC,GAAsC,IAApCD,EAAmC,EAAnCA,SAAUE,EAAyB,EAAzBA,KAASP,EAAgB,mCACzD,OACC,gDACCG,KAAK,SACLF,UAAS,0CAELM,EAAO,cAAgB,GAFlB,aAIJP,GANN,aAQGK,OC2FUG,G,MAhGE,SAAAC,GAAS,MAWOC,mBAAS,IAXhB,mBAWlBC,EAXkB,KAWRC,EAXQ,OAYSF,mBAAS,IAZlB,mBAYlBG,EAZkB,KAYPC,EAZO,OAaCJ,mBAAS,QAbV,mBAalBK,EAbkB,KAaXC,EAbW,KAqDzB,MACW,SAAVD,EACA,sBAAKd,UAAU,OAAf,UACC,sBAAKA,UAAU,cAAf,UACC,sBAAMA,UAAU,iBAAhB,0CACC,qBACCA,UAAU,gBACVgB,QAfiB,WACrBC,aAAaC,QACbH,EAAS,UAWN,2BAMF,qBAAKf,UAAU,cAAf,+CACA,uBAAMA,UAAU,uBAAhB,UACC,cAAC,EAAD,CACCmB,GAAG,QACHrB,WAAS,EACTJ,SAtDgB,SAAA0B,GACnBA,EAAMC,iBACNV,EAAYS,EAAME,OAAOC,UAsDvB,cAAC,EAAD,CACCjB,MAAI,EACJU,QArDe,SAAAI,GAElB,GADAA,EAAMC,kBACFX,EAKH,OAAO,KAJPG,EAAa,GAAD,mBAAMD,GAAN,CAAiBF,KAC7BC,EAAY,IACZa,SAASC,eAAe,SAASF,MAAQ,IA8CxC,qBAOD,qBAAKvB,UAAU,iBAAf,SAEEY,EAAUc,KAAI,SAAAC,GAAI,OACjB,cAAC,EAAD,CAECX,QAAS,YAjDM,SAAAW,GACpB,GAAIA,EAAM,CACT,IAAMC,EAAWhB,EAAUiB,QAAO,SAAAC,GAAK,OACtCA,IAAUH,KAEXd,EAAae,IA4COG,CAAaJ,IAF9B,SAIEA,GAHIA,WAUV,cAAC,EAAD,MCwFaK,G,MArLG,SAAAxB,GAAS,MAMAC,mBAAS,IANT,mBAMnBwB,EANmB,KAMZC,EANY,OAOMzB,mBAAS,IAPf,mBAOnB0B,EAPmB,KAOTC,EAPS,OAQA3B,mBAAS,UART,mBAQnBK,EARmB,KAQZC,EARY,OASoBN,oBAAS,GAT7B,mBASnBb,EATmB,KASDyC,EATC,OAU0B5B,oBAAS,GAVnC,mBAUnBZ,EAVmB,KAUEyC,EAVF,OAWQ7B,oBAAS,GAXjB,mBAWnB8B,EAXmB,KAWRC,EAXQ,OAYc/B,oBAAS,GAZvB,mBAYnBgC,EAZmB,KAYLC,EAZK,KAiB1BC,qBAAU,YAEFJ,GADO,uJACaK,KAAKX,IAAUA,EAAMY,OAAS,GACtDR,GAAkB,GAElBA,GAAkB,KAEpB,CAACJ,EAAOM,IAEVI,qBAAU,YACJF,GAAgBN,EAASU,OAAS,EACtCP,GAAqB,GAErBA,GAAqB,KAErB,CAACH,EAASU,OAAQJ,IAIpB,IAAMK,EAAoB,SAACb,GACZ,uJACFW,KAAKX,IAAUA,EAAMY,OAAS,GACvCR,GAAkB,GAElBA,GAAkB,GAErBG,GAAa,IAGRO,EAAuB,SAACZ,GACzBA,EAASU,OAAS,GAAKV,EAASU,OAAS,GAC3CP,GAAqB,GAErBA,GAAqB,GAEvBI,GAAgB,IA0DjB,OAjBAC,qBAAU,WACT,IAAMK,EAAmBC,OAAOhC,aAAaiC,QAAQ,iBACrD,GAAIF,EAAkB,CACrB,IAAMG,EAAUC,KAAKC,MAAML,GAC3BF,EAAkBK,EAAQlB,OAC1Bc,EAAqBI,EAAQhB,UACzBvC,GAAoBC,GACvBkB,EAAS,aAGVA,EAAS,YAER,IAMQ,WAAVD,EACC,sBAAKd,UAAU,kBAAf,UACA,oBAAIA,UAAU,cAAd,yBACA,sBAAMA,UAAU,gBAAhB,6CACA,uBAAMA,UAAU,aAAhB,UACC,sBAAKA,UAAU,uBAAf,UACC,uBAAOA,UAAU,QAAjB,mBACA,cAAC,EAAD,CACCA,UAAU,aACVL,KAAK,QACLO,KAAK,QACLoD,YAAY,sBACZ/B,MAAOU,EACPrC,iBAAkBA,EAClB2D,OAAQ,kBAAMT,EAAkBb,IAChCvC,SAAU,SAAA0B,GAAK,OAAIc,EAASd,EAAME,OAAOC,QACzCiC,UAAQ,IAMP5D,EAID,sBAAMI,UAAU,QAAhB,oBAHA,qBAAKA,UAAU,eAAf,oDAMF,sBAAKA,UAAU,uBAAf,UACC,uBAAOA,UAAU,QAAjB,sBACA,cAAC,EAAD,CACCL,KAAK,WACLO,KAAK,WACLL,oBAAqBA,EACrByD,YAAY,gCACZ/B,MAAOY,EACPoB,OAAQ,kBAAMR,EAAqBZ,IACnCzC,SAAW,SAAA0B,GAAK,OAAIgB,EAAYhB,EAAME,OAAOC,QAC7CiC,UAAQ,IAGP3D,EAID,sBAAMG,UAAU,QAAhB,oBAHA,qBAAKA,UAAU,eAAf,+CAMF,cAAC,EAAD,CACCE,KAAK,SACLqB,MAAM,QACNP,QApFiB,WACpB,GAAIpB,GAAoBC,EAAqB,CAC5C,IAAM4D,EAAiB,CACtBxB,MAAOA,EACPE,SAAUA,GAEXc,OAAOhC,aAAayC,QAAQ,gBAAiBN,KAAKO,UAAUF,IAE7D1C,EAAS,SA6EN6C,SAIW,KAAV3B,GAAgBE,EAASU,OAAS,IACjCjD,IAAqBC,EATxB,yBAiBF,cAAC,EAAD,MC1KagE,G,MATD,SAAArD,GAEb,OACC,qBAAKR,UAAU,aAAf,SACC,cAAC,EAAD,Q,MCGY8D,MARf,WACE,OACE,qBAAK9D,UAAU,MAAf,SACI,cAAC,EAAD,OCFR+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAASC,eAAe,W","file":"static/js/main.7c13927c.chunk.js","sourcesContent":["import React from 'react';\nimport { MdAccountBox } from 'react-icons/md';\nimport { MdLock } from 'react-icons/md';\n\nimport './form-input.styles.css';\n\n// Form input field, reused in all pages.\n// Dynamically adds an icon, depending on the name passed to it.\n// Takes the names of the email, the password and the \n// isValidated props and decides dynamically \n// which class of the input form to render.\n\nconst FormInput = ({ \n\t\tonChange, \n\t\tname, \n\t\tisValidatedEmail, \n\t\tisValidatedPassword, \n\t\tlistInput, \n\t\t...otherProps \n\t}) => {\n\n\treturn (\n\t\t<div \n\t\t\tclassName={`\n\t\t\t\t${ \n\t\t\t\t\tlistInput ? 'input-container' :\n\t\t\t\t\t\t!isValidatedEmail && name === \"email\" ? 'invalid' : \n\t\t\t\t\t\t\t!isValidatedPassword && name === \"password\" ? \n\t\t\t\t\t\t\t\t'invalid' : 'input-container'\n\t\t\t\t}\n\t\t\t`}\n\t\t>\n\t\t\t{\n\t\t\t\tname ?\n\t\t\t\t\tname === 'email' ? \n\t\t\t\t\t\t<MdAccountBox \n\t\n\t\t\t\t\t\t\tsize=\"30px\" /> :\n\t\t\t\t\t\t<MdLock \n\t\t\n\t\t\t\t\t\t\tsize=\"30px\" />\n\t\t\t\t: ''\n\t\t\t}\n\t\t\t<input\n\t\t\t\tclassName=\"form-input\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tonChange={onChange}\n\t\t\t\t{...otherProps}\n\t\t\t/>\n\t\t</div>\t\n\t);\n};\n\nexport default FormInput;","import React from 'react';\nimport './list-item.styles.css';\n\nconst ListItem = ({ children, ...otherProps }) => {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"list-item\"\n\t\t\t{ ...otherProps }\n\t\t>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\n\nexport default ListItem;","import React from 'react';\nimport './button-prime.styles.css';\n\nconst ButtonPrime = ({ children, list, ...otherProps}) => {\n\treturn (\n\t\t<button\n\t\t\ttype=\"submit\"\n\t\t\tclassName={`\n\t\t\t\tbutton-prime\n\t\t\t\t${ list ? 'list-button' : '' }\n\t\t\t`}\n\t\t\t{ ...otherProps }\n\t\t\t>\n\t\t\t{ children }\n\t\t</button>\n\t);\n}\n\nexport default ButtonPrime;","import React, { useState } from 'react';\nimport FormInput from '../../components/form-input/form-input.component';\nimport ListItem from '../../components/list-item/list-item.component';\nimport ButtonPrime from '../../components/button-prime/button-prime.component';\nimport Login from '../../pages/login/login.component';\n\nimport './list.styles.css';\n\nconst ToDoList = props => {\n\t\n\t// State is set with value from the input field, obtained from\n\t// the onChange event listener.\n\t// Then the text is added to an array of list items.\n\t// List item state is reset after it is added to array\n\t// and input field is cleared.\n\t// Some input validation is peformed as well.\n\n\t// Routing also controlled with useState.\n\n\tconst [listItem, setListItem] = useState('');\n\tconst [listItems, setListItems] = useState([]);\n\tconst [route, setRoute] = useState('list');\n\n\tconst handleInput = event => {\n\t\tevent.preventDefault();\n\t\tsetListItem(event.target.value);\n\t};\n\n\tconst handleSave = event => {\n\t\tevent.preventDefault();\n\t\tif (listItem) {\n\t\t\tsetListItems([ ...listItems, listItem ]);\n\t\t\tsetListItem('');\n\t\t\tdocument.getElementById('input').value = '';\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t// When deleting a memo, new array is returned and used to set new state\n\t// Event listener is passed to the List Item component, below in render.\n\n\tconst handleDelete = item => {\n\t\tif (item) {\n\t\t\tconst newItems = listItems.filter(entry =>\n\t\t\t\tentry !== item\n\t\t\t);\n\t\t\tsetListItems(newItems);\n\t\t}\n\t};\n\n\t// On sign out the storage is cleared and the route is set\n\n\tconst handleSignout = () => {\n\t\tlocalStorage.clear();\n\t\tsetRoute('login')\n\t}\n\n\t// The list of items in state is iterated and visualized\n\t// with the ListItem component\n\n\treturn (\n\t\troute === 'list' ?\n\t\t<div className=\"list\">\n\t\t\t<div className=\"list-header\">\n\t\t\t\t<span className=\"header-tagline\">DON'T FORGET TO DO THINGS!!!</span>\n\t\t\t\t\t<div \n\t\t\t\t\t\tclassName=\"list-sign-out\"\n\t\t\t\t\t\tonClick={handleSignout}\n\t\t\t\t\t>\t\tSIGN OUT\n\t\t\t\t\t</div>\n\t\t\t</div> \n\t\t\t<div className=\"list-action\">ADD SOME ITEMS TO YOUR TO-DO LIST</div>\n\t\t\t<form className=\"list-input-container\">\n\t\t\t\t<FormInput \n\t\t\t\t\tid=\"input\"\n\t\t\t\t\tlistInput\n\t\t\t\t\tonChange={handleInput}\n\t\t\t\t/>\n\t\t\t\t<ButtonPrime \n\t\t\t\t\tlist\n\t\t\t\t\tonClick={handleSave}\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</ButtonPrime>\n\t\t\t</form>\n\t\t\t<div className=\"list-container\">\n\t\t\t\t{\n\t\t\t\t\tlistItems.map(item => (\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tkey={item}\n\t\t\t\t\t\t\tonClick={() => {handleDelete(item)}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t\t:\n\t\t<Login />\n\t);\n};\n\nexport default ToDoList;","import React, { useState, useEffect } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport ToDoList from '../../pages/list/list.component'\nimport ButtonPrime from '../button-prime/button-prime.component';\n\nimport './login-form.styles.css';\n\nconst LoginForm = props => {\n\n\t// State of the login component.\n\t// The email and the password of the current user, current route\n\t// and control variables.\n\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [route, setRoute] = useState('signin');\n\tconst [isValidatedEmail, setValidatedEmail] = useState(true);\n\tconst [isValidatedPassword, setValidatedPassword] = useState(true);\n\tconst [blurEmail, setBlurEmail] = useState(false);\n\tconst [blurPassword, setBlurPassword] = useState(false);\n\n\t// useEffect hook is used to validate input.\n\t// Regex key for email.\n\n\tuseEffect(() => {\n\t\tconst regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  \t\tif (!blurEmail || (regex.test(email) && email.length < 50)) {\n  \t\t\tsetValidatedEmail(true);\n  \t\t} else {\n  \t\t\tsetValidatedEmail(false);\n  \t\t}\n\t},[email, blurEmail]);\n\n\tuseEffect(() => {\n\t\tif (!blurPassword || password.length > 3) {\n\t\t\tsetValidatedPassword(true);\n\t\t} else {\n\t\t\tsetValidatedPassword(false);\n\t\t}\n\t},[password.length, blurPassword]);\n\n\t// Validation functions of email and password for the onBlur events.\n\n\tconst blurValidateEmail = (email) => {\n\t\tconst regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  \t\tif (regex.test(email) && email.length < 50) {\n  \t\t\tsetValidatedEmail(true);\n  \t\t} else {\n  \t\t\tsetValidatedEmail(false);\n  \t\t}\n\t\tsetBlurEmail(true);\n\t};\n\n\tconst blurValidatePassword = (password) => {\n\t\tif (password.length > 3 && password.length < 16) {\n\t \t\tsetValidatedPassword(true);\n\t \t} else {\n\t \t\tsetValidatedPassword(false);\n\t \t}\n\t\tsetBlurPassword(true);\n\t};\n\n\t// This is the API call, appears to be blocked by CORS.\n\t// This function would be called back in the onClick event of the Login button below\n\t// to fetch the user.\n\n\tconst submitSignIn = () => {\n\t\tfetch(\"https://dev.rapptrlabs.com/Tests/scripts/user-login.php\", {\n\t\t    method: \"POST\",\n\t\t    headers: {\n\t\t      \"Content-Type\": \"application/json\"\n\t\t    },\n\t\t    body: JSON.stringify({\n\t\t      'email': email,\n\t\t      'password': password\n\t\t    })\n\t\t  })\n\t\t.then(response => response.json())\n\t\t.then(data => console.log(data))\n\t\t.catch(err => console.log)\n\t};\n\n\n\t// Session persistance. Function runs on submit, stores the email and password \n\t// in local storage.\n\n\tconst handleSubmit = () => {\n\t\tif (isValidatedEmail && isValidatedPassword) {\n\t\t\tconst sessionToStore = {\n\t\t\t\temail: email,\n\t\t\t\tpassword: password\n\t\t\t};\n\t\t\twindow.localStorage.setItem('storedSession', JSON.stringify(sessionToStore));\n\t\t}\n\t\tsetRoute('list');\n\t}\n\n\t// Retrieves the stored email and password and validates them \n\t// before routing to the to-do list.\n\n\tuseEffect(() => {\n\t\tconst retrievedSession = window.localStorage.getItem('storedSession');\n\t\tif (retrievedSession) {\n\t\t\tconst session = JSON.parse(retrievedSession);\n\t\t\tblurValidateEmail(session.email);\n\t\t\tblurValidatePassword(session.password);\n\t\t\tif (isValidatedEmail && isValidatedPassword) {\n\t\t\t\tsetRoute('list');\n\t\t\t}\n\t\t} else {\n\t\t\tsetRoute('signin');\n\t\t}\n\t}, []);\n\n\t// If route is set to \"signin\" the present component is rendered.\n\t// If route changes from submitting the form, the To Do List is rendered.\n\n\treturn (\n\t\troute === 'signin' ?\n\t\t\t<div className=\"login-container\">\n\t\t\t<h1 className=\"login-title\">RAPPTR LABS</h1>\n\t\t\t<span className=\"login-tagline\">Sign in with Email and Password</span>\n\t\t\t<form className=\"login-form\">\n\t\t\t\t<div className='form-input-container'>\n\t\t\t\t\t<label className=\"label\">Email</label>\n\t\t\t\t\t<FormInput\n\t\t\t\t\t\tclassName=\"form-input\"\n\t\t\t\t\t\tname=\"email\" \n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"user@rapptrlabs.com\"\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tisValidatedEmail={isValidatedEmail}\n\t\t\t\t\t\tonBlur={() => blurValidateEmail(email)}\n\t\t\t\t\t\tonChange={event => setEmail(event.target.value)}\n\t\t\t\t\t\trequired \n\t\t\t\t\t/>\n\t\t\t\t\t{\n\t\t\t\t\t\t//A placeholder div is created with a zero width character to\n\t\t\t\t\t\t// be replaced by the error message\n\n\t\t\t\t\t\t!isValidatedEmail ?\n\t\t\t\t\t\t<div className=\"failed-valid\">\n\t\t\t\t\t\t\tPlease enter a valid email address.\n\t\t\t\t\t\t</div> :\n\t\t\t\t\t\t<span className=\"valid\">&zwnj;</span>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className='form-input-container'>\n\t\t\t\t\t<label className=\"label\">Password</label>\n\t\t\t\t\t<FormInput\n\t\t\t\t\t\tname=\"password\" \n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tisValidatedPassword={isValidatedPassword}\n\t\t\t\t\t\tplaceholder=\"Must be at least 4 characters\"\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonBlur={() => blurValidatePassword(password)}\n\t\t\t\t\t\tonChange={ event => setPassword(event.target.value)}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t{\n\t\t\t\t\t\t!isValidatedPassword ?\n\t\t\t\t\t\t<div className=\"failed-valid\">\n\t\t\t\t\t\t\tPlease enter a valid password.\n\t\t\t\t\t\t</div> :\n\t\t\t\t\t\t<span className=\"valid\">&zwnj;</span>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<ButtonPrime\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tvalue=\"Login\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\tdisabled={\n\n\t\t\t\t\t\t// Input validation for the Login button\n\t\t\t\t\t\t\n\t\t\t\t\t\temail === '' || password.length < 4 || \n\t\t\t\t\t\t!isValidatedEmail || !isValidatedPassword\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tLogin\n\t\t\t\t</ButtonPrime>\n\t\t\t</form>\n\t\t\t</div>\n\t\t: \n\t\t<ToDoList />\n\t);\n};\n\nexport default LoginForm;\n\n\n","import React from 'react';\nimport LoginForm from '../../components/login-form/login-form.component';\n\nimport './login.styles.css';\n\nconst Login = props => {\n\n\treturn (\n\t\t<div className=\"login-page\">\n\t\t\t<LoginForm />\n\t\t</div>\n\t);\n};\n\nexport default Login;","import Login from './pages/login/login.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Login />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}